;==============================================================================
;
; RUN
;
; Samuel Volk, July 2018
;
; Culmination of sprite work and background scrolling to show an animal
; running.
;
;==============================================================================

.GBHEADER
    NAME "RUN"
    CARTRIDGETYPE $00 ; RAM only
    RAMSIZE $00 ;32KByte, no ROM banking
    COUNTRYCODE $01 ; outside Japan
    NINTENDOLOGO
    LICENSEECODENEW "SV"
    ROMDMG  ; DMG rom

.ENDGB


.MEMORYMAP
    DEFAULTSLOT 0
    SLOTSIZE $4000
    SLOT 0 $0000
    SLOT 1 $4000
.ENDME

.ROMBANKSIZE $4000
.ROMBANKS 2

; WRAM Variables
.DEFINE DogeX $C000
.DEFINE DogeY $C001
.DEFINE DogeFrame $C002
.DEFINE MapX $C005
.DEFINE MapY $C004
.DEFINE Doge $C100  ; OAM for doge

;==============================================================================
; GAMEBOY HEADER
;==============================================================================
.BANK 0
.ORG $00    ; Reset $00
    jp $100
.ORG $08    ; Reset $08
    jp $100
.ORG $10    ; Reset $10
    jp $100
.ORG $18    ; Reset $18
    jp $100
.ORG $20    ; Reset $20
    jp $100
.ORG $28    ; Reset $28	- Copy Data routine
CopyData:
    pop hl  ; pop return address off stack
    push bc

    ; get number of bytes to copy
    ; hl contains the address of the bytes following the rst call
    ldi a, (hl)
    ld b, a
    ldi a, (hl)
    ld c, a

-   ldi a, (hl)	; start transfering data
    ld (de), a
    inc de
    dec bc
    ld a, b
    or c
    jr nz, -

    ; all done
    pop bc
    jp hl
    reti

.ORG $30    ; Reset $30
    ;jp $100
.ORG $38    ; Reset $38
    ;jp $100

.ORG $40    ; Vblank IRQ Vector
    reti
.ORG $48    ; LCD IRQ Vector
    reti
.ORG $50    ; Timer IRQ Vector
    reti
.ORG $58    ; Serial IRQ Vector
    reti
.ORG $60    ; Joypad IRQ Vector
    reti

.ORG $100   ; Code Execution Start
    nop
    jp Start


;==============================================================================
; SUBROUTINES
;==============================================================================
.BANK 0
.ORGA $3000

; Init Subroutines
BlankSprites:
    ld hl, $8000
    ld bc, 4080
-   ld a, 0
    ldi (hl), a
    dec bc
    ld a, b
    or c
    jp nz, -
    ret

BlankOAM
    ld hl, Doge
    ld bc, 160	; entries
-   ld a, 0
    ldi (hl), a
    dec bc
    ld a, b
    or c
    jp nz, -

LoadTiles:
    ld hl, Tiles
    ld de, $8000
    ld bc, TilesLen
-   ldi a, (hl)
    ld (de), a
    inc de
    dec bc
    ld a, b
    or c
    jp nz, -
    ret

BlankMap:
    ld hl, $9800
    ld bc, 1024
-   ld a, 0
    ldi (hl), a
    dec bc
    ld a, b
    or c
    jp nz, -
    ret

LoadMap:
    ld hl, Map
    ld de, $9800
    ld bc, MapLen
-   ldi a, (hl)
    ld (de), a
    inc de
    dec bc
    ld a, b
    or c
    jp nz, -
    ret

ScreenOn:
    ldh a, ($40)
    or %01000000
    ldh ($40), a
    ret

ScreenOff:
    ld a, 0
    ldh ($40), a
    ret

WaitVBlank:
    ld a, ($FF44)
    cp $91
    jr nz, WaitVBlank
    ret

DMACopy:
    ld de, $FF80    ; destination of HRAM for DMA routine
    rst $28
    .DB $00, $0D    ; assembled DMA subroutine length
		    ; then assembled DMA subroutine
    .DB $F5, $3E, $C1, $EA, $46, $FF, $3E, $28, $3D, $20, $FD, $F1, $D9
    ret


; Sprite Subroutines
MoveDoge:   ; modifies doge OAM x & Ys 
    ; Y ordinates
    ld hl, Doge     ; OAM in WRAM
    ld b, 16	    ; total sprites to modify
    ld a, (DogeY)   ; starting Y
    ld c, a
    ld de, 4	    ; next entry is 4 bytes away
-   ld (hl), c
    add hl, de
    dec b
    ; if b = 12, c =+ 8
    ld a, 12
    cp b
    jp z, Change
    ; if b = 8, c =+ 8
    ld a, 8
    cp b
    jp z, Change
    ; if b = 4, c =+ 8
    ld a, 4
    cp b
    jp nz, noChange
Change:
    ld a, 8
    add c
    ld c, a
noChange:
    xor a
    cp b
    jp nz, -

    ; x ordinates
    ld hl, Doge+1   ; oam in wram
    ld b, 16	    ; total sprites to modify
    ld a, (DogeX)   ; starting x
    ld c, a
    ld de, 4	    ; next entry is 4 bytes away
-   ld (hl), c
    add hl, de
    dec b
    ld a, 8
    add c
    ld c, a
    ; if b = 12, c -= 24
    ld a, 12
    cp b
    jp z, ChangeX
    ; if b = 8, c -= 24
    ld a, 8
    cp b
    jp z, ChangeX
    ; if b = 4, c -= 24
    ld a, 4
    cp b
    jp nz, noChangeX
ChangeX:
    ld a, c
    ld c, 32
    sub c
    ld c, a
noChangeX
    xor a
    or c
    jp nz, -
    ret

DogeAnim:
    ; figure out tile to start on
    ld a, (DogeFrame)	; frame should be 0-16
    inc a		; next frame
    and $0F		; keep frame within 0-16
    ld (DogeFrame), a	; put back for safe keeping
    and %1000
    jp z, frame1
;frame0:
    ld c, $10
    jp +
frame1:
    ld c, $20

    ; set tiles up
+   ld hl, Doge+2   ; first tile number of first sprite
    ld b, 16	    ; 16 sprites total
    ;ld c, 0	    ; tile starts at 0 and goes up from there
    ld de, 4
-   ld (hl), c
    add hl, de
    dec b
    inc c
    ld a, 0
    cp b
    jp nz, -

    ret
    

;==============================================================================
; START
;==============================================================================
.ORG $150
Start:
    di
    ld sp, $FFFE    ; setup stack

    ; wait for vblank
    call WaitVBlank
    ; turn screen off
    call ScreenOff

    ; no sound needed
    xor a
    ldh ($26), a

    call BlankOAM
    call BlankSprites
    call LoadTiles
    call BlankMap
    call LoadMap
    ; load palette
    ld a, %11100100
    ldh ($47), a
    ld a, %00011011
    ldh ($48), a

    call DMACopy ; set up DMA subroutine

    ; setup doge OAM
    xor a
    ld (DogeFrame), a
    ld a, 72
    ld (DogeX), a
    ld a, 90
    ld (DogeY), a
    ; tile numbers
    ld hl, Doge+2   ; first tile number of first sprite
    ld b, 16	    ; 16 sprites total
    ld c, $10	    ; tile starts at x and goes up from there
    ld de, 4
-   ld (hl), c
    add hl, de
    dec b
    inc c
    ld a, 0
    cp b
    jp nz, -

    call MoveDoge
    
    ; setup screen
    ld a, %10010011
    ldh ($40), a
    ei

MainLoop:
    call WaitVBlank
    call $FF80 ; DMA routine in HRAM

    ; move map
    ldh a, ($43)
    inc a
    ldh ($43), a

    ;call MoveDoge
    call DogeAnim

    jp MainLoop


;==============================================================================
; DATA
;==============================================================================

.ORG $500
.DEFINE TilesLen 96*8
Tiles:
; empty tile
.DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
; empty grass
.DB %00000000, %11111111
.DB %00000000, %11111111
.DB %00000000, %11111111
.DB %00000000, %11111111
.DB %00000000, %11111111
.DB %00000000, %11111111
.DB %00000000, %11111111
.DB %00000000, %11111111
; grass edge
.DB %11111111, %11111111
.DB %00000000, %11111111
.DB %00000000, %11111111
.DB %00000000, %11111111
.DB %00000000, %11111111
.DB %00000000, %11111111
.DB %00000000, %11111111
.DB %00000000, %11111111
; water edge
.DB %11111111, %00000000
.DB %10110011, %00000000
.DB %00001000, %00000000
.DB %00000010, %00000000
.DB %01000000, %00000000
.DB %00001000, %00000000
.DB %00000000, %00000000
.DB %00000001, %00000000

.DB %11111111, %00000000
.DB %01101010, %00000000
.DB %01000100, %00000000
.DB %00000010, %00000000
.DB %00010000, %00000000
.DB %00000000, %00000000
.DB %00000100, %00000000
.DB %00000000, %00000000
; water
.DB %01000000, %00000000
.DB %00000100, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00100000, %00000000
.DB %00000000, %00000000
.DB %00000100, %00000000
.DB %00000000, %00000000

.DB %00000000, %00000000
.DB %00010000, %00000000
.DB %01000000, %00000000
.DB %00000100, %00000000
.DB %00000000, %00000000
.DB %00010000, %00000000
.DB %00000001, %00000000
.DB %01000000, %00000000
; beach edge
.DB %10000000, %00000000
.DB %11100000, %00000000
.DB %11111000, %00000000
.DB %11111111, %00000000
.DB %11111111, %00000000
.DB %11111111, %00000100
.DB %11111111, %01000000
.DB %11111111, %00000000

.DB %00000000, %00000000
.DB %00000111, %00000000
.DB %00011111, %00000000
.DB %11111111, %00000000
.DB %11111111, %00001000
.DB %11111111, %00000000
.DB %11111111, %00100000
.DB %11111111, %00000000

.DB %11111100, %00000000
.DB %11111111, %01000000
.DB %11111111, %00000010
.DB %11111111, %00000000
.DB %11111111, %00010000
.DB %11111111, %00000000
.DB %11111111, %10000010
.DB %11111111, %00000000

.DB %00011111, %00000000
.DB %11111111, %00000100
.DB %11111111, %00000000
.DB %11111111, %00010000
.DB %11111111, %00000000
.DB %11111111, %00000000
.DB %11111111, %01000010
.DB %11111111, %00000000
; beach
.DB %11111111, %01000000
.DB %11111111, %00000000
.DB %11111111, %00000100
.DB %11111111, %00000000
.DB %11111111, %01010000
.DB %11111111, %00000010
.DB %11111111, %01001000
.DB %11111111, %10111010

.DB %11111111, %00010000
.DB %11111111, %00000000
.DB %11111111, %01000100
.DB %11111111, %00000000
.DB %11111111, %10001000
.DB %11111111, %00000000
.DB %11111111, %01000100
.DB %11111111, %10001011


.ORG $600
dogeTiles:
;1 1
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
;1 2
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
;1 3
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %11000000, %00000000
;1 4
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
;1 5
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
;1 6
.DB %00000001, %00000000
.DB %00000011, %00000001
.DB %00000111, %00000011
.DB %00001111, %00000110
.DB %00011111, %00001101
.DB %00011111, %00010000
.DB %00000000, %00000000
.DB %00000000, %00000000
;1 7
.DB %11111110, %11000000
.DB %11111111, %11111110
.DB %11111111, %01111111
.DB %01111111, %11111100
.DB %11111111, %11111011
.DB %01111111, %11111111
.DB %11111111, %01111111
.DB %10111111, %01111111
;1 8
.DB %00000000, %00000000
.DB %10000000, %00000000
.DB %11000000, %10000000
.DB %11111111, %11000000
.DB %11111001, %11111110
.DB %11111001, %11111110
.DB %11111010, %11111100
.DB %01111100, %10000000
;1 9
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000001, %00000000
.DB %00000010, %00000001
.DB %00000111, %00000011
.DB %00001111, %00000111
.DB %00001101, %00000111
.DB %00011011, %00001111
;1 10
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %11111111, %00000000
.DB %01110000, %11111111
.DB %11111111, %11111111
.DB %11111111, %11111111
.DB %11111111, %11111111
.DB %11011111, %11111111
;1 11
.DB %01110011, %00111100
.DB %01111110, %00111100
.DB %10111110, %01111100
.DB %11111100, %11111110
.DB %11111111, %11111110
.DB %11111011, %11111110
.DB %11111011, %11111110
.DB %11111010, %11111100
;1 12
.DB %10000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
;1 13
.DB %00011111, %00001011
.DB %10011101, %00001011
.DB %11111110, %10011001
.DB %11111001, %01110000
.DB %01110000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
;1 14
.DB %11001111, %11111111
.DB %11110111, %11111111
.DB %11111111, %11110000
.DB %11111100, %11111000
.DB %10111101, %01111000
.DB %01110100, %00111000
.DB %00110100, %00011000
.DB %00011110, %00001100
;1 15
.DB %11011010, %11111100
.DB %11010010, %11111100
.DB %11110100, %00011000
.DB %11110100, %00011000
.DB %11111000, %11110000
.DB %11111000, %00100000
.DB %11100000, %01000000
.DB %01000000, %00000000
;1 16
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
;2 1
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
;2 2
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
;2 3
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
;2 4
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
;2 5
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
;2 6
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00001111, %00000000
.DB %00010111, %00001111
.DB %00000101, %00000010
.DB %00000010, %00000001
.DB %00000001, %00000000
.DB %00000001, %00000000
;2 7
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %11000000, %00000000
.DB %10111111, %11000000
.DB %11110111, %11111111
.DB %11111111, %01111111
.DB %11111111, %00111000
.DB %01111111, %11111111
;2 8
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %10000000, %00000000
.DB %11000000, %10000000
.DB %11111111, %11000000
.DB %11111001, %11111110
;2 9
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000001, %00000000
.DB %00000010, %00000001
.DB %00000111, %00000011
.DB %00001111, %00000111
.DB %00001101, %00000111
.DB %10011011, %00001111
;2 10
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %11111111, %00000000
.DB %01110001, %11111111
.DB %11111111, %11111111
.DB %11111111, %11111111
.DB %11111111, %11111111
.DB %11011111, %11111111
;2 11
.DB %11111111, %01111111
.DB %01111111, %11111111
.DB %01100111, %11111111
.DB %11110111, %11111000
.DB %11111111, %11111110
.DB %11110111, %11111110
.DB %11110110, %11111111
.DB %11110111, %11111011
;2 12
.DB %11111001, %11111110
.DB %11111010, %11111100
.DB %00111000, %11000000
.DB %11000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %10000000, %00000000
.DB %01000000, %10000000
;2 13
.DB %11111011, %10001111
.DB %11111111, %01110011
.DB %01110101, %00000011
.DB %00000111, %00000111
.DB %00011111, %00001111
.DB %00111111, %00011100
.DB %11101100, %01110000
.DB %11110000, %00000000
;2 14
.DB %11111111, %11001111
.DB %11101111, %11000111
.DB %11000111, %10000000
.DB %11000000, %10000000
.DB %10000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
;2 15
.DB %11111111, %11111001
.DB %11011110, %11111100
.DB %11110101, %00001110
.DB %00000111, %00000011
.DB %00000011, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
.DB %00000000, %00000000
;2 16
.DB %10100000, %11000000
.DB %11010000, %01100000
.DB %01111000, %00100000
.DB %10111100, %00011000
.DB %11010100, %10001000
.DB %11001000, %01100000
.DB %01000000, %00100000
.DB %00000000, %00000000

.DEFINE MapLen 1024
Map:
.DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.DB $03,$04,$03,$04,$03,$04,$03,$04,$03,$04,$03,$04,$03,$04,$03,$04,$03,$04,$03,$04,$03,$04,$03,$04,$03,$04,$03,$04,$03,$04,$03,$04
.DB $05,$06,$05,$06,$05,$06,$05,$06,$05,$06,$05,$06,$05,$06,$05,$06,$05,$06,$05,$06,$05,$06,$05,$06,$05,$06,$05,$06,$05,$06,$05,$06
.DB $07,$08,$09,$0A,$07,$08,$09,$0A,$07,$08,$09,$0A,$07,$08,$09,$0A,$07,$08,$09,$0A,$07,$08,$09,$0A,$07,$08,$09,$0A,$07,$08,$09,$0A
.DB $0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C,$0B,$0C
.DB $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
.DB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
.DB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
.DB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
.DB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
.DB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
.DB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01

.DB $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
